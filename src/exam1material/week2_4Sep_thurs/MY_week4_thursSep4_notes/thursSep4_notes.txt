HW 1 repository issues


HW 2 due Tuesday, September 9

--> will be creating 2 image files

--> make sure those are added to your git repository!

////////////////////////////

Today:
- one more parse tree / circuit
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Example: another parse tree

p ∧ q ∧ r → ¬p ∨ q → r

top-level operator: Leftmost Implies


Example: another circuit

p OR q AND NOT p


//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)



- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Example: 

z != 7 && str.contains(sub)


--> what are the propositional atoms?
p: z == 7
q: str.contains(sub)


--> express in propositional logic
NOT p AND q
¬p ∧ q


////////////////////////////////////////

Example:

You can't enroll for the course if you haven't taken the prerequisite.


--> what are the propositional atoms?
p: Can enroll for course
q: You've taken the prerequisite


--> translate to propositional logic:

really saying:
¬p → ¬q




What is the *contrapositive* of our statement?

p → q

if you haven't taken the prerequisite, then you can't enroll for the course



//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

Propositional atoms?

p: x <= 2
q: y >= 0
r: z == 17
s: answer: 25

Translation? (if ... then ...)

(p ∨ q) ∧ ¬r → 2

//////////////////////////////////

Consider these two statements:

p: I am at least 16 years old
q: I can drive a car


1) If I am at least 16 years old, then I can drive a car.

p →  q

2) I'm not at least 16 years old or I can drive a car.

¬p ∨ q 

--> are they saying the same thing?




--> could we PROVE it? (equiv1.logika, equiv2.logika)

For every possible truth assignmaent, the 2 statements have the same output






//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...
    these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if(a != 4 || a != 5)


///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?





//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to...  ¬p ∧ ¬q

¬(p ∧ q) is equivalent to... ¬p ∨ ¬q 


--> how can we prove the first of DeMorgan's laws?

For every possible truth assignmaent, the 2 statements have the same output



////////////////////////

Another if-statement example.


if (Character.isDigit(letter) || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?
    also no extra ()



///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:

if(!(y >= 4 && num != 14) && x <= 0)

if((y < 4 || num == 14) && x <= 0)



///////////////////////

in-class quiz

///////////////////////

Summary of important equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q                  (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q

p → q ≡  ¬q → ¬p                    (contrapositive)
p → q ≡  ¬p ∨ q                     (can turn implies into an or)


associative laws - Can move the parenthesis without changing result of the equation

    (2 + 3) + 5 = ?

    (p ∧ q) ∧ r     vs      p ∧ (q ∧ r)   


    (p → q) → r     vs      p → (q → r)

    how to show logically equivalent? 

    Implies is NOT associative

    how to show NOT equivalent? 

    find ONE truth assihnment where the 2 statements have different output

    p = F
    q = T
    r = F

    They are not equivalent because the 2 statements have differnt output on the truth aissignments above

commutative laws 

p ∧ q   vs  q ∧ p

p ∨ q   vs  p ∨ q

p → q   vs  q → p   Not Commutative


--> you may still be asked to demonstrate these with
    truth tables or prove them with natural deduction (coming soon)


//////////////////////////

Summary of equivalence.

How do we prove two statements ARE equivalent?
    2 truth tables. Show that for every truth assignment
    they have the same output


How do we prove two statements are NOT equivalent?
    Find 1 truth assignment which is a counterexample



//////////////////////////

What is equivalent to:

¬p → q


¬q → p
p ∨ q

//////////////////////////

Satisfiability.

- definition:
    A logical statement is satisfiable if I can find a truth assignment where the statement outputs are true


- what kind of statement is satisfiable? what kind is not?

    satisfiable: contingent, tautology
    not satisfiable: contradictory

- is this satisfiable?

    (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

yes

p = T
q = T
r = T

Makes statement output true

to show a statement is satisifiable: One truth assignment

to show a statement is NOT satisfiable: The entire truth table is contradictory
(outputs false for every truth assignmaent)


////////////////////////////

SAT

straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument

